//https://zmk.dev/docs/codes
//https://zmk.dev/docs/development/new-shield

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#include "zmk-helpers/helper.h"
#include "unicode-chars/spanish.dtsi"

#define LOWER 1
#define RAISE 2
#define SHIFT 3
#define OPTIONS 4
#define LOCK 5

/*
&mt es una abreviatura de "mod-tap". Este comportamiento permite que una tecla funcione como un modificador 
(como Shift, Ctrl, Alt, etc.) cuando se mantiene presionada, y como una tecla normal cuando se pulsa y se suelta 
rápidamente. Por ejemplo, &mt LSFT A hará que una tecla funcione como "A" cuando se pulsa y se suelta rápidamente, 
y como Shift izquierdo cuando se mantiene presionada.

&kt es una abreviatura de "key tap". Este comportamiento permite que una tecla funcione como una tecla normal cuando 
se pulsa y se suelta rápidamente, pero también puede tener un comportamiento diferente si se mantiene presionada. Sin 
embargo, a diferencia de &mt, &kt no está limitado a los modificadores y puede asignar cualquier comportamiento a la 
acción de mantener presionada.

Por lo tanto, la principal diferencia entre &mt y &kt es que &mt está limitado a los modificadores para la acción de 
mantener presionada, mientras que &kt puede asignar cualquier comportamiento a la acción de mantener presionada.
*/

/ {
    behaviors {
        // Hold-tap behavior
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            //flavor = "tap-preferred"; por defecto en situaciones ambiguas que haga el hold
            bindings =
                <&kp>,
                <&kp>;
        };

        // Toggle layers
        tl: tl{
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";                
            tapping-term-ms = <200>;                  // Tiempo para determinar entre tap y hold
            quick-tap-ms = <200>;                     // Tiempo de espera para un tap rápido
            bindings = <&tog 1>, <&tog 4>;  // Capa Lower para tap, Capa Options para hold
        };

        // Tap dance CAPSLOCK
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <170>;
            bindings = <&kp LSHFT>, <&kp CAPSLOCK>;
        };
        //, ;
        td1: td1 { 
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp COMMA>, <&kp LT>;
        };
        //. :
        td2: td2 { 
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOT>, <&kp GT>;
        };

        // Raise, Lock
        td3:td3{
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo RAISE>, <&tog LOCK>;
        };
        
        //. ,
        td4: td4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DOT>, <&kp COMMA>;
        };
        
        //TAB ESCAPE
        // td5:td5{
        //     compatible = "zmk,behavior-tap-dance";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <200>;
        //     bindings = <&kp TAB>, <&kp ESC>;
        // };

        // Backspace Delete
        mod1: mod1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
    };
    
    // conditional_layers {
    //     compatible = "zmk,conditional-layers";

    //     tri_layer {
    //         if-layers = <LOWER RAISE>;
    //         then-layer = <OPTIONS>;
    //     };
    // };
	
    macros {
        macro1: macro1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp F4>;
        };
        passVeridata: passVeridata {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CAPSLOCK &kp A &kp B &kp C &kp D &kp CAPSLOCK &kp QUESTION &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_N4>;
        }; 
    };
    
    keymap {
        compatible = "zmk,keymap";
        // Default Layer
        // |ESC/TAB|  Q  |  W  |  E  |  R  |  T  |       |  Y  |  U  |  I  |  O  |  P  | BKSP/DEL |
        // | TD0   |  A  |  S  |  D  |  F  |  G  |       |  H  |  J  |  K  |  L  |  Ñ  |   ´¨{}   |
        // | LCTRL |  Z  |  X  |  C  |  V  |  B  |       |  N  |  M  |  ,; |  .: |  -_ |    '?    |
        //                     | ALT | LW/OPT | SPC |       | ENT | LGUI| TD3 |
        default_layer {
            bindings = <
                &kp TAB &kp Q       &kp W       &kp E       &kp R   &kp T               &kp Y       &kp U       &kp I           &kp O           &kp P       &mod1
                &td0        &kp A       &kp S       &kp D       &kp F   &kp G               &kp H       &kp J       &kp K           &kp L           &kp SEMI    &kp SQT
                &kp LCTRL   &kp Z       &kp X       &kp C       &kp V   &kp B               &kp N       &kp M       &td1      &td2        &kp SLASH   &kp MINUS
                                                    &kp LALT    &tl 1 4   &kp SPACE           &kp ENTER   &kp LGUI    &td3
            >;
        };
		// number arrows and media
        // Layer Lower - Number pad and media keys
        // |ESC/TAB|  1   |  2   |  3   |  4   |  5   |       | &none |  6   |  7   |  8   |  9   |  0   | BKSP/DEL |
        // | &none | VOL+ | VOL- | MUTE | &none| &none|       | &none |  UP  | &none| &none| &none| &none| DEL      |
        // | &none | REW  |  FF  | PLAY | HOME | END  |       | &none | LEFT | DOWN | RGHT |  .,   | &none| PRINT    |
        //                       | &trans| &trans| &trans|       | &trans | RALT | &trans|
        layer_lower {
            bindings = <
                &kp ESCAPE &kp NUMBER_1    &kp NUMBER_2    &kp NUMBER_3        &kp NUMBER_4  &kp NUMBER_5              &kp NUMBER_6 &kp NUMBER_7 &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &kp BACKSPACE
                &trans      &kp C_VOLUME_DOWN  &kp C_VOL_UP    &kp C_MUTE          &none       &none                       &none       &kp UP      &none        &none          &none       &kp DELETE
                &trans      &ht C_RW C_PREV &ht C_FF C_NEXT &kp C_PLAY_PAUSE    &kp HOME    &kp END                     &kp LEFT    &kp DOWN    &kp RIGHT    &td4  &trans      &kp PRINTSCREEN
                                                            &trans              &trans      &trans                      &trans      &kp RALT    &trans 
            >;
        };

        layer_raise {
            bindings = <
                &kp F1  &kp F2                  &kp F3          &kp F4      &kp F5  &kp F6                  &kp F7          &kp F8  &kp F9     &kp F10     &kp F11   &kp F12
                &trans  &kp C_AL_TEXT_EDITOR    &kp C_AL_CALC   &kp C_AL_DB &trans  &trans                  &none           &none   &kp LBKT   &kp RBKT    &es_corchete_izq   &es_corchete_der
                &trans  &menor_que                  &mayor_que          &trans      &trans  &trans          &abre_int_ex           &none   &kp LBRC   &es_c_cedilla    &es_llave_izq   &es_llave_der
                                                                &kp LALT    &trans  &macro1                 &passVeridata   &kp LGUI  &trans
            >;
        };

        layer_shift {
            bindings = <
                &kp TILDE        &kp EXCL        &kp AT         &kp HASH       &kp DLLR        &kp PRCNT       &kp CARET       &kp AMPS       &kp KP_MULTIPLY       &kp LPAR       &kp RPAR       &kp UNDERSCORE
                &trans           &trans          &trans         &trans         &trans          &trans          &trans          &trans         &kp PIPE               &kp COLON      &kp DOUBLE_QUOTES  &kp PLUS
                &kp PRINTSCREEN  &trans          &trans         &trans         &trans          &trans          &trans          &trans         &trans                &kp LESS_THAN  &kp GREATER_THAN   &kp CAPSLOCK
                                            &trans           &trans          &trans         &trans        &trans             &trans
            >;
        };

        layer_options {
            bindings = <
                &none  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4                &trans  &trans          &trans      &kp C_BRI_DN        &kp C_BRI_UP     &bt BT_CLR
                &trans      &trans          &trans          &trans          &trans          &trans                      &trans  &trans          &trans      &trans   &trans &trans
                &trans      &trans          &trans          &trans          &trans          &trans                      &trans  &trans          &trans      &trans   &trans &trans
                                                            &ext_power EP_TOG  &trans          &bootloader           &bootloader  &rgb_ug RGB_TOG &out OUT_TOG 
            >;
        };

        // -----------------------------------------------------------------------------------------
        // 3 phim Lower+Raise+Backspace bat/tat che do khoa phim
        lock_layer {
            bindings = <
                &none      &none      &none      &none      &none      &none                            &none      &none      &none      &none      &none      &trans
                &none      &none      &none      &none      &none      &none                            &none      &none      &none      &none      &none      &none
                &none      &none      &none      &none      &none      &none                            &none      &none      &none      &none      &none      &none
                                                 &none      &trans     &none                            &none      &trans     &trans
            >;
        };
    };
};
